# !!! READ THIS !!! if you change this file run --------$ tmux source-file ~/.tmux.conf

# set ^f to be the new cmd hotkey
unbind C-b
set -g prefix C-f

# remap rotate window to <C-f> i
unbind C-o
unbind i
bind-key i rotate-window

#bind-key % to hotdog split window
bind % split-window -h -c "#{pane_current_path}"

#bind-key " to hamberger split window
bind '"' split-window -v -c "#{pane_current_path}"

# new windows open in $PWD
bind c new-window -c "#{pane_current_path}"

#bind o previos pane p next pane
bind-key          p select-pane -t :.+
bind-key          o select-pane -t :.-

# map vim nav keys to switch panes
unbind l
bind-key h select-pane -L 
bind-key l select-pane -R 
bind-key k select-pane -U
bind-key j select-pane -D

# map vim nav keys CAPS to resize panes
bind-key H resize-pane -L 10
bind-key L resize-pane -R 10
bind-key K resize-pane -U 10
bind-key J resize-pane -D 10

#setup color scheme
set-option -g status-bg colour30
set-option -g status-fg colour0

# set mouse mode on by default
set -g mode-mouse on

# bind <C-f> m turn mouse mode on 
bind m \
	set -g mode-mouse on \;\
	set -g mouse-resize-pane on \;\
	set -g mouse-select-pane on \;\
	set -g mouse-select-window on \;\
	display 'Mouse: ON'

# bind <C-f> M turn mouse mode off
bind M \
	set -g mode-mouse off \;\
	set -g mouse-resize-pane off \;\
	set -g mouse-select-pane off \;\
	set -g mouse-select-window off \;\
	display 'Mouse: OFF'

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# bind prefix ctrl-l to clear screen
bind C-l send-keys 'C-l'
# make tmux copy paste to system clipboard requires(brew install reattach-to-user-namespace)
set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l zsh|| zsh"
bind v run-shell "reattach-to-user-namespace -l zsh -c 'tmux set-buffer 		"$(pbpaste)"; tmux paste-buffer'"
bind y run-shell "reattach-to-user-namespace -l zsh -c 'tmux show-buffer | pbcopy'"

